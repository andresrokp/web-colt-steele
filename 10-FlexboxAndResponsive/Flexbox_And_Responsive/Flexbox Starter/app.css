body {
    font-family: 'Open Sans', sans-serif;
}
h1 {
    text-align: center;
}
#container {
    background-color: #003049;
    width: 90%;
    height: 500px;
    margin: 0 auto;
    border: 5px solid #003049;
    
    display: flex;                  /* Tells the container to be a flexbox */
                                    /* Flex containers bid contained elements to stay inside of them */
    flex-direction: row;             /* flex-direction stablish the main direction, and indirectly the cross direction: if  the flex is a column or a row*/
    /* flex-direction: column;         Tells the container to behave as a column */
    /* flex-direction: row-reverse;    row organizes from right to left */
    /* flex-direction: column-reverse;    column organizes from bottom to top */

    justify-content: space-between;        /* justify-content    stablish how the items are distributed along the main direction */
                                          /* space-around   distributes the items in the main direction equally spaced around the container */
                                          /* space-between  distributes the items in the main direction equally spaced between the elements */
                                          /* space-evenly   distributes the items in the main direction equally spaced between the container */
                                          /* center, flex-start and flex-end    for basic positioning*/    

    
    
    flex-wrap: nowrap;                    /* indicates what to do with the remaining elements after cope que flex main direction */
                                        /* wrap : the elements in excess to place next to the main line in direction of the cross axis */
                                        /* wrap-reverse : makes to add the new line in negative direction of the cross axis */
                                        /* nowrap : or default skishes all to fit if the main axis is crowded */
    /**/
    align-items: baseline;                /* tells how to align the elements respect to an imaginary axis */
                                        /* flex-start : all elems stik to the "near" side */
                                        /* flex-end : elems stick to the "further" side */
                                        /* stretch : makes the elements to stretch until fill the cross axis */
                                        /* baseline : aligns with the element content, like text */
    /**/
    align-content: space-between;        /* organize the items overflow columns/rows aver the cross axis */
                                        /* the same thing as justify-content but regarding overflow piles */

    /* animation: stretch 2s infinite; */

}

@keyframes stretch {
    0% {  width: 5%; }
    50% {  width: 95%; }
    100% { width: 5%; }
}

#container div {
    width: 250px;
    height: 100px;
}

#container div:nth-of-type(2n){
    height: 200px;
    width: 200px;
}

div:nth-of-type(3){
    align-self: auto;               /* align-self defines the alignment of just ONE element respect to the aling-item-axis */
    /* same thing as align-item but just over the element who  */
    flex-basis: 400px;              /* felx-basis stablish the initial size of the element along the main axis */
}

div:nth-of-type(4){
    flex-grow: 2;                   /* flex-grow : shares out the proportion of empty space the element will take*/
}

div:nth-of-type(5){
    flex-grow: 1;
}

/*  >>>   flex-shrink : gives the rate an element will shrink while decreasing */

main{
    height: 500px;
    border: 1px solid white;
    width: 80%;
    margin: 0 auto;
    display: flex;
}

main .sidebar{
    background-color: red;
    flex:1 300px;

}

main .maincontent{
    background-color: blue;
    flex:5 1 200px;
}